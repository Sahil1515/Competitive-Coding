Level order Traversal
Execution Time:0.01

vector<int> levelOrder(Node* node)
{
  vector <int> v;
  if(node == NULL)
  return v;
  queue <Node *> q;

  q.push(node);
  
  while( q.empty()==false)
  {
      Node* temp=q.front();
      v.push_back(temp->data);
      
      if(temp->left!=NULL)
      q.push(temp->left);
       
      if(temp->right!=NULL)
      q.push(temp->right);
       q.pop();
  }
  return v;
  
}






Q 
Boundary Traversal of binary tree
Execution Time:0.25


vector<int > v;
void printLeft(Node * root)
{
    if(root)
    {
        if(root->left ==NULL && root->right ==NULL) 
        return ;
        else 
        v.push_back(root->data);
        if(root->left)
        printLeft(root->left);
        else if(root->right)
        printLeft(root->right);
    }
  }


void  printLeaves(Node* root)
{
     if(root)
    {
        printLeaves(root->left);
        printLeaves(root->right);
        if(root->left==NULL && root->right ==NULL )
        v.push_back(root->data);
    }
    
}


vector <int> printBoundary(Node *root)
{
    v.clear();
    if(root==NULL)
    return v;
    
    printf("%d ",root->data);
    printLeft(root->left);
    printLeaves(root);
    printRight(root->right);
    
    return v;
    
    
}




Q
Level order traversal in spiral form
Execution Time:0.01 sec

void printSpiral(Node *root)
{
    //Your code here
    
    if(root==NULL)
    return;
    
    deque<Node *> q;
    
    printf("%d ",root->data);
    int iter=1;
    if(root->left)
    q.push_back(root->left);
    if(root->right)
    q.push_back(root->right);
  while(1)
  {
      int t=q.size();
    while(t!=0)
    {
        t--;
        
       if(iter%2==1)
       {
        Node* temp=q.front();
        q.pop_front();
        if(temp->left)
        q.push_back(temp->left);
        if(temp->right)
        q.push_back(temp->right);
        printf("%d ",temp->data);
       }
       else 
        {
        Node* temp=q.back();
        q.pop_back();
        if(temp->right)
        q.push_front(temp->right);
        if(temp->left)
        q.push_front(temp->left);
        printf("%d ",temp->data);
        }
    }
      iter++;
      
      if(q.empty()==true)
        break;
  }

}











Q Level order Traversal line by line
Execution Time:0.35


void levelOrder(Node* node)
{
    if( node ==NULL)
    return;
    
    queue <Node *> q;
    q.push(node);
    
   while(1)
    {
        int t=q.size();

      while(t!=0)
     {
         t--;
        Node * temp=q.front();
        
        printf("%d ",temp->data);
        if(temp->left!=NULL)
        q.push(temp->left);
        
        if(temp->right!=NULL)
        q.push(temp->right);
        
        q.pop();
        
      }
          printf("$ ");
    if(q.empty()==true)
    break;
    }
    
}
